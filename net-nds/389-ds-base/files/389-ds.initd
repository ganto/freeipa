#!/sbin/runscript
# Copyright 1999-2010 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

DIRSRV_EXEC="/usr/sbin/ns-slapd"
PID_DIRECTORY="/var/run/dirsrv"
LOCK_DIRECTORY="/var/lock/dirsrv"
DIRSRV_CONF_DIR="/etc/dirsrv"
DS_INSTANCES=${DIRSRV_CONF_DIR}/slapd-*
F389DS_INSTANCE=${RC_SVCNAME:7}

depend() {
	need net logger
	use dns
	provide dirsvr ldap
}

checkconfig() {
	if [ -z "${F389DS_INSTANCE}" ]; then
		if [ -z "`/bin/ls -d ${DS_INSTANCES} 2>/dev/null`" ]; then
			eerror "389 Directory Server has not been configured."
			eend 1
			return 1
		fi
	else
		if [ ! -d "${DIRSRV_CONF_DIR}"/slapd-${F389DS_INSTANCE} ]; then
			eerror "389 Directory Server instance '${F389DS_INSTANCE}' not found."
			eend 1
			return 1
		fi
	fi
}

# /var/run and /var/lock are on a tmpfs which are wiped out upon a reboot.
# Recreated the necessary directories for a server start and make sure that
# they are writable for the directory server process. The argument to this
# function is the server instance, which must have a dse.ldif file in its
# configuration directory.
create_run_dirs() {
	owner=`grep \^nsslapd-localuser ${DIRSRV_CONF_DIR}/${1}/dse.ldif | awk '{print $2}'`
	instance_lockdir=${LOCK_DIRECTORY}/${1}
	if [ ! -d ${PID_DIRECTORY} ]; then
		mkdir -p ${PID_DIRECTORY}
		if [ -n "${owner}" ]; then
			chown ${owner} ${PID_DIRECTORY}
			chmod 0700 ${PID_DIRECTORY}
		fi
	fi
	if [ ! -d ${instance_lockdir} ]; then
		mkdir -p ${instance_lockdir}
		if [ -n "${owner}" ]; then
			chown ${owner} ${instance_lockdir}
			chmod 0700 ${instance_lockdir}
		fi
	fi
}

start_instance() {
	# The server creates pidfile and writes the pid to it when it is fully
	# started and available to serve clients
	pidfile=${PID_DIRECTORY}/${1}.pid
	# The server creates startpidfile and writes the pid to just after
	# the process begins i.e. it received the startup request and didn't
	# die a horrible death (e.g. shared lib problem, oom, etc.)
	startpidfile=${PID_DIRECTORY}/${1}.startpid

	rm -f ${pidfile}
	rm -f ${startpidfile}
	create_run_dirs ${1}

	ebegin "Starting 389 Directory Server: instance ${1}"
	start-stop-daemon --start --quiet -m \
		--pidfile ${startpidfile} \
		--exec ${DIRSRV_EXEC} -- \
		-D ${DIRSRV_CONF_DIR}/${1} \
		-i ${pidfile} \
		-w ${startpidfile}
	sts=${?}
	eend ${sts}
	if [ "${sts}" != "0" ]; then
		return 1
	fi
}

stop_instance() {
	ebegin "Stopping 389 Directory Server: instance ${1}"
	start-stop-daemon --stop --quiet \
		--pidfile ${PID_DIRECTORY}/${1}.pid \
		--exec ${DIRSRV_EXEC}
	eend ${?}
}

status_instance() {
	if [ -e ${PID_DIRECTORY}/${1}.pid ]; then
		pid=$(cat ${PID_DIRECTORY}/${1}.pid)
		name=$(ps -p $pid | tail -1 | awk '{ print $4 }')
		if kill -0 $pid 2>/dev/null && [ ${name} = "ns-slapd" ]; then
			einfo "389 Directory Server: instance ${1} (pid $pid) running."
		else
			ewarn "389 Directory Server: instance ${1} (pid $pid) NOT running."
		fi
	else
		eerror "389 Directory Server: instance ${1} is NOT running."
	fi
}

start() {
	checkconfig || return 1

	if [ -z "${F389DS_INSTANCE}" ]; then
		sts=0
		for instance in ${DS_INSTANCES}; do
			instance=$(basename ${instance})
			# skip .removed instances, bug #338133
			if [ "${instance%%.removed}" != "${instance}" ]; then
				continue
			fi
			start_instance ${instance}
			ret=${?}
			sts=$((${sts}|${ret}))
		done
	else
		start_instance slapd-${F389DS_INSTANCE}
		sts=${?}
	fi
	return ${sts}
}

stop() {
	checkconfig || return 1

	if [ -z "${F389DS_INSTANCE}" ]; then
		for instance in ${DS_INSTANCES}; do
			instance=$(basename ${instance})
			stop_instance ${instance}
		done
	else
		stop_instance slapd-${F389DS_INSTANCE}
	fi
}

status() {
	checkconfig || return 1

	if [ -z "${F389DS_INSTANCE}" ]; then
		for instance in ${DS_INSTANCES}; do
			instance=$(basename ${instance})
			status_instance ${instance}
		done
	else
		status_instance slapd-${F389DS_INSTANCE}
	fi
}
