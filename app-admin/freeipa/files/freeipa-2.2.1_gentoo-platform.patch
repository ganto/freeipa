From fdf411005221fcf166641dbd08588799eef3b4be Mon Sep 17 00:00:00 2001
From: Reto Gantenbein <reto.gantenbein@linuxmonk.ch>
Date: Sat, 24 Nov 2012 19:03:46 +0100
Subject: [PATCH] Add Gentoo platform service definition

---
 ipapython/platform/gentoo.py |  198 ++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 198 insertions(+), 0 deletions(-)
 create mode 100644 ipapython/platform/gentoo.py

diff --git a/ipapython/platform/gentoo.py b/ipapython/platform/gentoo.py
new file mode 100644
index 0000000..6df63a6
--- /dev/null
+++ ipapython/platform/gentoo.py
@@ -0,0 +1,198 @@
+# Authors: Simo Sorce <ssorce@redhat.com>
+#          Alexander Bokovoy <abokovoy@redhat.com>
+#          Reto Gantenbein <reto.gantenbein@linuxmonk.ch>
+#
+# Copyright (C) 2007-2011   Red Hat
+# see file 'COPYING' for use and warranty information
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+import tempfile
+import re
+import os
+import stat
+import sys
+import socket
+from ipapython import ipautil
+from ipapython.platform import base
+
+# All what we allow exporting directly from this module
+# Everything else is made available through these symbols when they directly imported into ipapython.services:
+# authconfig -- class reference for platform-specific implementation of authconfig(8)
+# service    -- class reference for platform-specific implementation of a PlatformService class
+# knownservices -- factory instance to access named services IPA cares about, names are ipapython.services.wellknownservices
+# backup_and_replace_hostname -- platform-specific way to set hostname and make it persistent over reboots
+# restore_context -- platform-sepcific way to restore security context, if applicable
+__all__ = ['authconfig', 'service', 'knownservices', 'backup_and_replace_hostname', 'restore_context']
+
+# Gentoo has different names for some wellknownservices, define the mapping
+gentoo_servicemap = dict([
+    ("dirsrv", "389-ds"),
+    ("httpd", "apache2"),
+    ("messagebus", "dbus")])
+
+class GentooService(base.PlatformService):
+    def __init__(self, service_name):
+        if service_name in gentoo_servicemap:
+            service_name = gentoo_servicemap[service_name]
+        super(GentooService, self).__init__(service_name)
+
+    # OpenRC doesn't like empty instance_name: will fail with "service_name: not enough arguments"
+    def stop(self, instance_name="", capture_output=True):
+        if instance_name:
+            ipautil.run(["/sbin/rc-service", self.service_name + "." + instance_name, "stop"], capture_output=capture_output)
+        else:
+            ipautil.run(["/sbin/rc-service", self.service_name, "stop"], capture_output=capture_output)
+
+    def start(self, instance_name="", capture_output=True):
+        if instance_name:
+            ipautil.run(["/sbin/rc-service", self.service_name + "." + instance_name, "start"], capture_output=capture_output)
+        else:
+            ipautil.run(["/sbin/rc-service", self.service_name, "start"], capture_output=capture_output)
+
+    def restart(self, instance_name="", capture_output=True):
+        if instance_name:
+            ipautil.run(["/sbin/rc-service", self.service_name + "." + instance_name, "restart"], capture_output=capture_output)
+        else:
+            ipautil.run(["/sbin/rc-service", self.service_name, "restart"], capture_output=capture_output)
+
+    def is_running(self, instance_name=""):
+        ret = True
+        try:
+            if instance_name:
+                (sout,serr,rcode) = ipautil.run(["/sbin/rc-service", self.service_name + "." + instance_name, "restart"])
+            else:
+                (sout,serr,rcode) = ipautil.run(["/sbin/rc-service", self.service_name, "restart"])
+            if sout.find("status: stopped") >= 0:
+                ret = False
+        except ipautil.CalledProcessError:
+                ret = False
+        return ret
+
+    def is_installed(self):
+        installed = True
+        try:
+            ipautil.run(["/sbin/rc-service", self.service_name, "status"])
+        except ipautil.CalledProcessError, e:
+            if e.returncode == 1:
+                # service is not installed or there is other serious issue
+                installed = False
+        return installed
+
+    def is_enabled(self, instance_name=""):
+        service_link = "/etc/runlevels/default/" + self.service_name
+	(stdout, stderr, returncode) = ipautil.run(["test", "-L", service_link],raiseonerr=False)
+        return (returncode == 0)
+
+    def enable(self, instance_name=""):
+        ipautil.run(["/sbin/rc-update", "add", self.service_name, "default"])
+
+    def disable(self, instance_name=""):
+        ipautil.run(["/sbin/rc-update", "del", self.service_name, "default"])
+
+    def install(self, instance_name=""):
+        if instance_name:
+            ipautil.run(["/bin/ln", "-s", self.service_name, "/etc/init.d/" + self.service_name + "." + instance_name])
+
+    def remove(self, instance_name=""):
+        if instance_name:
+            ipautil.run(["rm", "-f", "/etc/init.d/" + self.service_name + "." + instance_name])
+
+class GentooSSHService(GentooService):
+    def get_config_dir(self, instance_name=""):
+        return '/etc/ssh'
+
+class GentooAuthConfig(base.AuthConfig):
+    """
+    AuthConfig class implements system-independent interface to configure
+    system authentication resources. In Red Hat-produced systems this is done with
+    authconfig(8) utility.
+    """
+    def __build_args(self):
+        args = []
+        for (option, value) in self.parameters.items():
+            if type(value) is bool:
+                if value:
+                    args.append("--enable%s" % (option))
+                else:
+                    args.append("--disable%s" % (option))
+            elif type(value) in (tuple, list):
+                args.append("--%s" % (option))
+                args.append("%s" % (value[0]))
+            elif value is None:
+                args.append("--%s" % (option))
+            else:
+                args.append("--%s%s" % (option,value))
+        return args
+
+    def execute(self):
+        args = self.__build_args()
+        ipautil.run(["/usr/sbin/authconfig"]+args)
+
+def gentoo_service(name):
+    if name == 'sshd':
+        return GentooSSHService(name)
+    return GentooService(name)
+
+class GentooServices(base.KnownServices):
+    def __init__(self):
+        services = dict()
+        for s in base.wellknownservices:
+            services[s] = gentoo_service(s)
+        # Call base class constructor. This will lock services to read-only
+        super(GentooServices, self).__init__(services)
+
+authconfig = GentooAuthConfig
+service = gentoo_service
+knownservices = GentooServices()
+
+def restore_context(filepath):
+    """
+    restore security context on the file path
+    SELinux equivalent is /sbin/restorecon <filepath>
+
+    restorecon's return values are not reliable so we have to
+    ignore them (BZ #739604).
+
+    ipautil.run() will do the logging.
+    """
+    try:
+        if (os.path.exists('/usr/sbin/selinuxenabled')):
+            ipautil.run(["/usr/sbin/selinuxenabled"])
+        else:
+            # No selinuxenabled, no SELinux
+            return
+    except ipautil.CalledProcessError:
+        # selinuxenabled returns 1 if not enabled
+        return
+
+    if (os.path.exists('/sbin/restorecon')):
+        ipautil.run(["/sbin/restorecon", filepath], raiseonerr=False)
+
+def backup_and_replace_hostname(fstore, statestore, hostname):
+    old_hostname = socket.gethostname()
+    try:
+        ipautil.run(['/bin/hostname', hostname])
+    except ipautil.CalledProcessError, e:
+        print >>sys.stderr, "Failed to set this machine hostname to %s (%s)." % (hostname, str(e))
+    replacevars = {'hostname':hostname}
+    old_values = ipautil.backup_config_and_replace_variables(fstore,
+                                                          "/etc/conf.d/hostname",
+                                                          replacevars=replacevars)
+    restore_context("/etc/conf.d/hostname")
+    if 'hostname' in old_values:
+        statestore.backup_state('network', 'hostname', old_values['hostname'])
+    else:
+        statestore.backup_state('network', 'hostname', old_hostname)
-- 
1.7.8.6

